/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program.toko;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.mbarang;
import model.mpenjualan;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Scanner;
import javax.print.PrintService;
import javax.print.attribute.AttributeSet;
import javax.print.attribute.HashAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.PrinterName;
import javax.print.attribute.standard.Sides;
import javax.swing.JEditorPane;
import javax.swing.JTable;
import javax.swing.text.StyleConstants;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author acer
 */
public class penjualan extends javax.swing.JInternalFrame {

    /**
     * Creates new form penjualan
     */
    mbarang modelbarang;
    mpenjualan modelpenjualan;
    ArrayList<String> daftarkode = new ArrayList<String>();
    double totalharga = 0;
    String[] colomname = {"kd_barang_", "nama", "harga", "quantity", "total"};
    JTable tabelsimpan = new JTable(0, 5);
    static MessageFormat head = new MessageFormat("");
    static MessageFormat foot = new MessageFormat("");
    int getstokgudang;

    public penjualan() {
        this.setSize(1, HEIGHT);
//            kd_barang.requestFocusInWindow();
//            kd_barang.requestFocus(true);
        try {
            initComponents();
            panelcari.setVisible(false);
            modelbarang = new mbarang();
            modelpenjualan = new mpenjualan();
        } catch (SQLException ex) {
            Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelcari = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        boxcari = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelcari = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        boxtotal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        kd_barang = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        boxtotal1 = new javax.swing.JTextField();
        databaru = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        boxbayar = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        boxkembalian = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ubahquantity = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelcari.setBackground(new java.awt.Color(255, 102, 0));
        panelcari.setNextFocusableComponent(kd_barang);
        panelcari.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pilih.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelcari.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 200, 60));

        boxcari.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        boxcari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                boxcariKeyReleased(evt);
            }
        });
        panelcari.add(boxcari, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 350, 60));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/batal1.png"))); // NOI18N
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setFocusPainted(false);
        jButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/image/batal2.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panelcari.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 180, 60));

        tabelcari.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelcari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabelcariKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tabelcari);

        panelcari.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 760, 370));

        getContentPane().add(panelcari, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, 470));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setText("total harga");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, -1, -1));

        boxtotal.setEditable(false);
        boxtotal.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        boxtotal.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(boxtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 360, 60));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "kd_barang", "nama", "harga", "quantity", "total"
            }
        ));
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 780, 380));

        kd_barang.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        kd_barang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kd_barangKeyPressed(evt);
            }
        });
        getContentPane().add(kd_barang, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 195, 42));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("kode barang");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 24));

        boxtotal1.setEditable(false);
        boxtotal1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxtotal1.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(boxtotal1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 180, 180, 50));

        databaru.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/db1.png"))); // NOI18N
        databaru.setMnemonic('d');
        databaru.setBorderPainted(false);
        databaru.setContentAreaFilled(false);
        databaru.setFocusPainted(false);
        databaru.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/image/db2.png"))); // NOI18N
        databaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaruActionPerformed(evt);
            }
        });
        getContentPane().add(databaru, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 400, 160, 80));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 0));
        jLabel3.setText("total biaya");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 150, -1, -1));

        boxbayar.setEditable(false);
        boxbayar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxbayar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        boxbayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boxbayarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                boxbayarKeyReleased(evt);
            }
        });
        getContentPane().add(boxbayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 260, 180, 50));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("bayar");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 230, -1, 20));

        boxkembalian.setEditable(false);
        boxkembalian.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        boxkembalian.setToolTipText("");
        getContentPane().add(boxkembalian, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 350, 180, 50));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("kembalian");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 320, -1, -1));

        ubahquantity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/qty1.png"))); // NOI18N
        ubahquantity.setMnemonic('u');
        ubahquantity.setBorderPainted(false);
        ubahquantity.setContentAreaFilled(false);
        ubahquantity.setFocusPainted(false);
        ubahquantity.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/image/qty2.png"))); // NOI18N
        ubahquantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubahquantityActionPerformed(evt);
            }
        });
        getContentPane().add(ubahquantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 160, 70));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/del1.png"))); // NOI18N
        jButton1.setMnemonic('h');
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/image/del2.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 80, 160, 70));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/cari1.png"))); // NOI18N
        jButton2.setMnemonic('c');
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/image/cari2.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 140, 70));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/back1.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-240, -30, 1250, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kd_barangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kd_barangKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                getstokgudang = Integer.parseInt(modelbarang.getquantity(kd_barang.getText()));
                if (getstokgudang == 0) {
                    JOptionPane.showMessageDialog(this, "stok kurang data tidak ada di db");
                    kd_barang.setText("");
                } else {
                    prosesbarang(kd_barang.getText());
                    kd_barang.setText("");
                    boxtotal.setText(rubahuangkerupiah(totalharga));
                    boxtotal1.setText(rubahuangkerupiah(totalharga));
                    boxbayar.setEditable(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        refrestable();
    }//GEN-LAST:event_kd_barangKeyPressed

    public void prosesbarang(String id) {
        DefaultTableModel modeltampil = (DefaultTableModel) table.getModel();
        DefaultTableModel modelsimpan = (DefaultTableModel) tabelsimpan.getModel();
        if (modelbarang.cekbarang(id)) {
            if (!daftarkode.contains(id)) {
                try {
                    // TODO add your handling code here:
                    String[] data = modelbarang.getdatawithid(id);
                    String data1 = data[0];
                    String data2 = data[1];
                    String data3 = rubahuangkerupiah(Double.parseDouble(data[2]));
                    double harga = Double.parseDouble(data[2]);
                    String data4 = "1";
                    double hitung = harga * Double.parseDouble(data4);
                    String data5 = rubahuangkerupiah(hitung);
                    Object[] rowtampil = {data1, data2, data3, data4, data5};
                    Object[] rowsimpan = {data1, data2, harga, data4, hitung};
                    modeltampil.addRow(rowtampil);
                    modelsimpan.addRow(rowsimpan);
                    //tambah kodebarang ke array list
                    daftarkode.add(data1);
                } catch (SQLException ex) {
                    Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    int getstokgudang = Integer.parseInt(modelbarang.getquantity("" + id));
                    for (int i = 0; i < table.getRowCount(); i++) {
                        if (("" + table.getValueAt(i, 0)).equalsIgnoreCase("" + id)) {
                            int quantity = Integer.parseInt("" + table.getValueAt(i, 3)) + 1;
                            if (quantity <= getstokgudang) {
                                table.setValueAt(quantity, i, 3);
                                tabelsimpan.setValueAt(quantity, i, 3);
                            } else {
                                message("stok kurang jika mau tambah");
                            }

                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            message("data tidak di temukan");

        }
    }
    private void databaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaruActionPerformed
        clearpenjualan();
    }//GEN-LAST:event_databaruActionPerformed

    private void boxbayarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boxbayarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && !boxbayar.getText().equals("")) {
            double uangbayar = Double.parseDouble(boxbayar.getText());
            if (uangbayar < totalharga) {
                message("uangkurang");
            } else {
                popup a = new popup(boxkembalian.getText());
                simpan();
                cetak();
                clearpenjualan();
            }
        }
    }//GEN-LAST:event_boxbayarKeyPressed

    private void boxbayarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boxbayarKeyReleased
        try {
            if (!boxbayar.getText().equals("")) {
                double uangbayar = Double.parseDouble(boxbayar.getText());
                if (uangbayar < totalharga) {
                    boxkembalian.setBackground(Color.red);
                    boxkembalian.setText("uang kurang");
                } else {
                    boxkembalian.setBackground(Color.green);
                    double kembalian = uangbayar - totalharga;
                    boxkembalian.setText("" + rubahuangkerupiah(kembalian));
                }
            }
        } catch (Exception e) {
            message("periksa kembali inputan anda");
            boxbayar.setText("");
        }

    }//GEN-LAST:event_boxbayarKeyReleased

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            refrestable();
        }

    }//GEN-LAST:event_tableKeyReleased

    private void ubahquantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubahquantityActionPerformed
        if (table.getSelectedRow() == -1) {
            message("pilih barang terlebih dahulu");
        } else {
            String quantity = JOptionPane.showInputDialog("masukan banyak barang");

            tabelsimpan.setValueAt(quantity, table.getSelectedRow(), 3);
            table.setValueAt(quantity, table.getSelectedRow(), 3);
            refrestable();
        }
    }//GEN-LAST:event_ubahquantityActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel modeltampil = (DefaultTableModel) table.getModel();
        DefaultTableModel modelsimpan = (DefaultTableModel) tabelsimpan.getModel();
        int row = table.getSelectedRow();
        if (table.getSelectedRow() == -1) {
            message("pilih data yang akan di hapus");
        } else {
            int ok = JOptionPane.showConfirmDialog(null, "Yakin Mau Hapus?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (ok == 0) {
                String getkodebarang = "" + table.getValueAt(row, 0);
                daftarkode.remove(getkodebarang);
                modeltampil.removeRow(row);
                modelsimpan.removeRow(row);
            }
        }
        refrestable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_U) {
            if (table.getSelectedRow() == -1) {
                message("pilih barang terlebih dahulu");
            } else {
                String quantity = JOptionPane.showInputDialog("masukan banyak barang");
                tabelsimpan.setValueAt(quantity, table.getSelectedRow(), 3);
                table.setValueAt(quantity, table.getSelectedRow(), 3);
                refrestable();
            }
        }
    }//GEN-LAST:event_formKeyPressed

    private void boxcariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boxcariKeyReleased

        try {
            tabelcari.setModel(modelbarang.getdatacaribarangbeli(boxcari.getText()));
        } catch (SQLException ex) {
            Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_boxcariKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (tabelcari.getSelectedRow() == -1) {
            message("pilih data terlebih dahulu");
        } else {
            try {
                String getcari = tabelcari.getValueAt(tabelcari.getSelectedRow(), 0).toString();
                getstokgudang = Integer.parseInt(modelbarang.getquantity(getcari));
                if (getstokgudang == 0) {
                    JOptionPane.showMessageDialog(this, "stok kurang data tidak ada di db");
                    kd_barang.setText("");
                } else {
                    prosesbarang(getcari);
                    kd_barang.setText("");
                    boxtotal.setText(rubahuangkerupiah(totalharga));
                    boxtotal1.setText(rubahuangkerupiah(totalharga));
                    boxbayar.setEditable(true);
                }
                panelcari.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        refrestable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        panelcari.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        panelcari.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tabelcariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelcariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (tabelcari.getSelectedRow() == -1) {
                message("pilih data terlebih dahulu");
            } else {
                try {
                    String getcari = tabelcari.getValueAt(tabelcari.getSelectedRow(), 0).toString();
                    getstokgudang = Integer.parseInt(modelbarang.getquantity(getcari));
                    if (getstokgudang == 0) {
                        JOptionPane.showMessageDialog(this, "stok kurang data tidak ada di db");
                        kd_barang.setText("");
                    } else {
                        prosesbarang(getcari);
                        kd_barang.setText("");
                        boxtotal.setText(rubahuangkerupiah(totalharga));
                        boxtotal1.setText(rubahuangkerupiah(totalharga));
                        boxbayar.setEditable(true);
                    }
                    panelcari.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            refrestable();
        }
    }//GEN-LAST:event_tabelcariKeyPressed
    public void clearpenjualan() {
        DefaultTableModel cleartabeltampil = (DefaultTableModel) table.getModel();
        cleartabeltampil.setRowCount(0);
        DefaultTableModel cleartabelsimpan = (DefaultTableModel) tabelsimpan.getModel();
        cleartabelsimpan.setRowCount(0);
        daftarkode.clear();
        kd_barang.setText("");
        boxtotal.setText("");
        boxtotal1.setText("");
        boxbayar.setText("");
        boxkembalian.setText("");
        boxbayar.setEditable(false);
        boxkembalian.setBackground(Color.white);
    }

    public void refrestable() {
        DefaultTableModel modelsimpan = (DefaultTableModel) tabelsimpan.getModel();
        DefaultTableModel modeltampil = (DefaultTableModel) table.getModel();
        double bayar = 0;
        for (int i = 0; i < modelsimpan.getRowCount(); i++) {
            try {
                getstokgudang = Integer.parseInt(modelbarang.getquantity(modeltampil.getValueAt(i, 0).toString()));
                int getquantity = Integer.parseInt(modeltampil.getValueAt(i, 3).toString());//setelah u[date
                int getquantitysimpan = Integer.parseInt(modelsimpan.getValueAt(i, 3).toString());//sebelum update
                if (getquantity > getstokgudang) {
                    JOptionPane.showMessageDialog(this, "stok kurang");
                    table.setValueAt(getquantitysimpan, i, 3);
                    break;
                } else {
                    double getharga = Double.parseDouble(modelsimpan.getValueAt(i, 2).toString());
                    double getuang = getharga * getquantity;
                    tabelsimpan.setValueAt(getuang, i, 4);//ganti besar total beli
                    tabelsimpan.setValueAt(getquantity, i, 3);//ganti quantity
                    table.setValueAt(rubahuangkerupiah(getuang), i, 4);
                    bayar += getuang;
                }
            } catch (SQLException ex) {
                Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        totalharga = bayar;
        boxtotal.setText(rubahuangkerupiah(bayar));
        boxtotal1.setText(rubahuangkerupiah(bayar));
    }

    public void cetak() {
        PrinterJob pj = PrinterJob.getPrinterJob();
        String cetak = "";
        String get = "";
        DefaultTableModel modeltampil = (DefaultTableModel) table.getModel();
        for (int i = 0; i < modeltampil.getRowCount(); i++) {
            get = "<tr height='4px'> <td>" + modeltampil.getValueAt(i, 1).toString().toUpperCase() + "</td>\n <td>" + modeltampil.getValueAt(i, 3) + "</td>\n <td>" + modeltampil.getValueAt(i, 2) + "</td>\n <td>" + modeltampil.getValueAt(i, 4) + "</tr>";
            String hasil = cetak.concat(get);
            cetak = hasil;
        }
        String hasilcetak = "<p style=\"text-align:left;\">PT apa itu (0336-321212)<BR>\n"
                + "Jl yang pernah ada<BR>\n"
                + "Jember Selatan<BR>\n"
                + "NPWP : 1293827384675\n"
                + "</p>\n"
                + "" + getjam() + " " + gettanggal() + " " + Gethari() + " |Kasir\n"
                + "<div style=\"border-bottom:2px dashed black;\"></div>\n"
                + "<table width=\"35%\">\n"
                + "<tr height='4px'>\n"
                + "	<td width='170px'>NAMA</td>\n"
                + "	<td>JML</td>\n"
                + "	<td>HARGA</td>\n"
                + "	<td>TOTAL</td>\n"
                + "</tr>\n"
                + cetak
                + "</table>\n"
                + "<table width=\"35%\">\n"
                + "<tr>\n"
                + "	<td width='170px'>TOTAL BAYAR</td>\n"
                + "	<td></td>\n"
                + "	<td></td>\n"
                + "	<td>" + boxtotal.getText() + "</td>\n"
                + "</tr>\n"
                + "<tr>\n"
                + "	<td>BAYAR</td>\n"
                + "	<td></td>\n"
                + "	<td></td>\n"
                + "	<td>" + rubahuangkerupiah(Double.parseDouble(boxbayar.getText())) + "</td>\n"
                + "</tr>\n"
                + "<tr>\n"
                + "	<td>KEMBALIAN</td>\n"
                + "	<td></td>\n"
                + "	<td></td>\n"
                + "	<td>" + boxkembalian.getText() + "</td>\n"
                + "</tr>\n"
                + "</table>\n"
                + "<p>Terima Kasih Atas Kunjungan Anda <br>\n"
                + "Periksa barang sebelum dibeli<br>\n"
                + "Barang yang sudah dibeli tidak bisa dikembalikan</p></font>";
        PageFormat pf = pj.defaultPage();
        Paper paper = new Paper();
        double margin = 20; // half inch
        paper.setImageableArea(margin, margin - 15, paper.getWidth() - margin * 2, paper.getHeight()
                - margin * 2);
        pf.setPaper(paper);;
        if (pj.printDialog()) {
            try {
                JEditorPane text = new JEditorPane("text/html", hasilcetak);
                text.setFont(new Font("segoe UI", Font.BOLD, 7));
                text.repaint();
                pj.setPrintable(text.getPrintable(head, foot), pf);
                PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                aset.add(new Copies(1));
                aset.add(Sides.DUPLEX);
                pj.print(aset);
            } catch (PrinterException ex) {
                Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public String rubahuangkerupiah(double uang) {
        String mataUang = String.format("Rp.%,.0f", uang).replaceAll(",", ".") + ",00";
        return mataUang;
    }

    private void simpan() {
        int jumlah_baris = table.getRowCount();
        if (jumlah_baris == 0) {
            message("table masih kosong!");
        } else {
            int i = 0;
            String[] data = new String[6];
            data[0] = generatenotransaksi();
            while (i < jumlah_baris) {
                data[1] = "";
                data[2] = "" + tabelsimpan.getValueAt(i, 0);//kodebarang
                data[3] = "" + tabelsimpan.getValueAt(i, 2);//harga
                data[4] = "" + tabelsimpan.getValueAt(i, 3);//quantity
                data[5] = "" + tabelsimpan.getValueAt(i, 4);//total
                modelpenjualan.tambahdatapenjualan(data);
                modelpenjualan.kurangistokgudang(data[4], data[2]);
                i++;
            }
        }
    }

    public String generatenotransaksi() {
        String hasil = null;
        try {
            String asli = gettanggal() + "000000";
            StringBuilder rubah = new StringBuilder(asli);
            String get = modelpenjualan.getnotransaksi();;
            char[] getarray = get.toCharArray();
            int count = 0;
            int countarray = getarray.length - 1;
            for (int i = asli.length() - 1; count < getarray.length; i--) {
                rubah.setCharAt(i, getarray[countarray]);
                countarray--;
                count++;
            }
            hasil = "" + rubah;
        } catch (SQLException ex) {
            Logger.getLogger(penjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hasil;
    }

    public void message(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    public String gettanggal() {
        DateFormat dateformat = new SimpleDateFormat("yyMMdd");
        Date date = new Date();
        return dateformat.format(date);
    }

    public String getjam() {
        String timeStamp = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
        return timeStamp;
    }

    public String Gethari() {
        Date now = new Date();
        SimpleDateFormat simpleDateformat = new SimpleDateFormat("EEEE"); // the day of the week abbreviated
        String hari = simpleDateformat.format(now);
        return hari;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boxbayar;
    private javax.swing.JTextField boxcari;
    private javax.swing.JTextField boxkembalian;
    private javax.swing.JTextField boxtotal;
    private javax.swing.JTextField boxtotal1;
    private javax.swing.JButton databaru;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kd_barang;
    private javax.swing.JPanel panelcari;
    private javax.swing.JTable tabelcari;
    private javax.swing.JTable table;
    private javax.swing.JButton ubahquantity;
    // End of variables declaration//GEN-END:variables
}
